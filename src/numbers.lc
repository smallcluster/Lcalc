import "booleans.lc";
succ := \n f x. f(n f x);
pred := \n f x. n (\g h. h (g f)) (\u.x) (\z.z); # pred de Kleene
exp := \n m. m n;
add := \n m f x. n f (m f x);
mult := \n m f. n (m f);
sub := \n m. m pred n;
iszero := \n x y.n(\z.y)x;
fact := \n. ifelse (iszero n) 1 (mult (fact (pred n)) n ); # VERY SLOW !
factp := \n. (n (\c. <mult (c (\x y. x)) (c (\x y. y)), succ (c (\x y. y))> ) <1,1> ) (\x y. x); # faster
